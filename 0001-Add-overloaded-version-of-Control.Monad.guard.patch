From 6e48ab8f6bd98eab785662324540872f0e67d4e6 Mon Sep 17 00:00:00 2001
From: Alexander Ulrich <alex@etc-network.de>
Date: Tue, 12 Jan 2016 10:21:31 +0100
Subject: [PATCH 1/2] Add overloaded version of Control.Monad.guard.

Control.Monad.guard uses concrete types for the predicate argument (Bool) and
the result (f ()). This makes it hard to use in deeply embedded DSLs. This patch
provides an overloaded version of guard in a class Guardable. Types for the
predicate and the result are determined via a type family to avoid ambiguity.
---
 libraries/base/Control/Monad.hs | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/libraries/base/Control/Monad.hs b/libraries/base/Control/Monad.hs
index 6957ad4..e7b8841 100644
--- a/libraries/base/Control/Monad.hs
+++ b/libraries/base/Control/Monad.hs
@@ -1,4 +1,5 @@
 {-# LANGUAGE Trustworthy #-}
+{-# LANGUAGE TypeFamilies #-}
 {-# LANGUAGE NoImplicitPrelude #-}
 
 -----------------------------------------------------------------------------
@@ -73,6 +74,8 @@ module Control.Monad
     -- ** Strict monadic functions
 
     , (<$!>)
+
+    , Guardable(..)
     ) where
 
 import Data.Foldable ( Foldable, sequence_, sequenceA_, msum, mapM_, foldlM, forM_ )
@@ -245,3 +248,19 @@ The functions in this library use the following naming conventions:
 >  msum :: MonadPlus m => [m a] -> m a
 
 -}
+
+
+class Alternative f => Guardable f where
+    type GuardBool f
+    type GuardUnit f
+    aguard :: GuardBool f -> f (GuardUnit f)
+
+instance Guardable Maybe where
+    type GuardBool Maybe = Bool
+    type GuardUnit Maybe = ()
+    aguard = guard
+
+instance Guardable [] where
+    type GuardBool [] = Bool
+    type GuardUnit [] = ()
+    aguard = guard
-- 
2.6.4

